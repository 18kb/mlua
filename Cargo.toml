[package]
name = "rlua"
version = "0.13.1-alpha.0"
authors = ["kyren <catherine@chucklefish.org>"]
description = "High level bindings to Lua 5.3"
repository = "https://github.com/chucklefish/rlua"
documentation = "https://docs.rs/rlua"
readme = "README.md"
keywords = ["lua"]
license = "MIT"

[badges]
travis-ci = { repository = "chucklefish/rlua", branch = "master" }

[features]
default = ["builtin-lua"]
# Builds the correct version of Lua 5.3 inside the crate. If you want to link a
# specialized version of lua into your binary, you can disable this feature to
# do that, but care must be taken.  `rlua` makes at least the following
# assumptions about the linked lua library:
# * LUA_INTEGER is long long
# * LUA_NUMBER as double
# * LUA_EXTRASPACE is sizeof(void*)
# * LUAI_MAXSTACK is 1000000
# * LUAI_THROW / LUAI_TRY are defined so that they are compatible with jumping
#   over Rust stack frames.  Rust is, as of the discussion around
#   https://github.com/rust-lang/rust/issues/48251, intended to be compatible in
#   at least a limited way with C libraries that use setjmp / longjmp error
#   handling, but there are some caveats.  The linked bug prevents calling into
#   C APIs which use setjmp / longjmp handling *at all* on windows with at least
#   the 1.24.0 version of the rust compiler, and it remains to be seen but
#   potentially the 1.24.1 and 1.25 versions as well.  Eventually the fix for
#   this will make it into stable rust, but until then there is a fix in the
#   bundled version of Lua to use __intrinsic_setjmp on windows instead of
#   setjmp to avoid unwinding and triggering rust issue #48251.
builtin-lua = ["gcc"]

[dependencies]
libc = { version = "0.2" }
failure = { version = "0.1.1" }
compiletest_rs = { version = "0.3", optional = true }

[build-dependencies]
gcc = { version = "0.3.52", optional = true }

[dev-dependencies]
rustyline = "1.0.0"